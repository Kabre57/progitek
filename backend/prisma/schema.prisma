// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  libelle     String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  utilisateurs Utilisateur[]

  @@map("roles")
}

model Utilisateur {
  id           Int      @id @default(autoincrement())
  nom          String
  prenom       String
  email        String   @unique
  motDePasse   String
  phone        String?
  theme        String?
  displayName  String?
  address      String?
  state        String?
  country      String?
  designation  String?
  balance      Float?   @default(0)
  emailStatus  String?  @default("verified")
  kycStatus    String?  @default("pending")
  lastLogin    DateTime?
  status       String   @default("active")
  roleId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  role                      Role                       @relation(fields: [roleId], references: [id])
  auditLogs                 AuditLogs[]
  notifications             Notification[]
  notificationPreferences   NotificationPreferences?
  reports                   Report[]
  devisValides              Devis[]                    @relation("DevisValidateur")

  @@map("utilisateurs")
}

model Client {
  id                  Int      @id @default(autoincrement())
  nom                 String
  email               String   @unique
  telephone           String?
  entreprise          String?
  typeDeCart          String?
  numeroDeCarte       String?
  statut              String   @default("active")
  image               String?
  localisation        String?
  theme               String?
  dateDInscription    DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  missions            Mission[]
  devis               Devis[]
  factures            Facture[]

  @@map("clients")
}

model Specialite {
  id          Int      @id @default(autoincrement())
  libelle     String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  techniciens Technicien[]

  @@map("specialites")
}

model Technicien {
  id           Int      @id @default(autoincrement())
  nom          String
  prenom       String
  contact      String?
  specialiteId Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  specialite     Specialite?    @relation(fields: [specialiteId], references: [id])
  interventions  Intervention[]

  @@map("techniciens")
}

model Mission {
  numIntervention                Int      @id @default(autoincrement())
  natureIntervention             String
  objectifDuContrat              String?
  description                    String?
  dateSortieFicheIntervention    DateTime?
  clientId                       Int
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  // Relations
  client         Client         @relation(fields: [clientId], references: [id])
  interventions  Intervention[]
  devis          Devis[]

  @@map("missions")
}

model Intervention {
  id              Int      @id @default(autoincrement())
  dateHeureDebut  DateTime?
  dateHeureFin    DateTime?
  duree           Int?
  missionId       Int
  technicienId    Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  mission     Mission     @relation(fields: [missionId], references: [numIntervention])
  technicien  Technicien? @relation(fields: [technicienId], references: [id])

  @@map("interventions")
}

model Devis {
  id                  Int      @id @default(autoincrement())
  numero              String   @unique
  clientId            Int
  missionId           Int?
  titre               String
  description         String?
  montantHT           Float
  tauxTVA             Float    @default(18)
  montantTTC          Float
  statut              String   @default("brouillon") // brouillon, envoye, valide_dg, refuse_dg, accepte_client, refuse_client, facture
  dateCreation        DateTime
  dateValidite        DateTime
  dateValidationDG    DateTime?
  dateReponseClient   DateTime?
  commentaireDG       String?
  commentaireClient   String?
  validePar           Int?
  factureId           Int?     @unique

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  client      Client       @relation(fields: [clientId], references: [id])
  mission     Mission?     @relation(fields: [missionId], references: [numIntervention])
  validateur  Utilisateur? @relation("DevisValidateur", fields: [validePar], references: [id])
  facture     Facture?     @relation(fields: [factureId], references: [id])
  lignes      DevisLigne[]

  @@map("devis")
}

model DevisLigne {
  id            Int    @id @default(autoincrement())
  devisId       Int
  designation   String
  quantite      Float
  prixUnitaire  Float
  montantHT     Float
  ordre         Int

  // Relations
  devis Devis @relation(fields: [devisId], references: [id], onDelete: Cascade)

  @@map("devis_lignes")
}

model Facture {
  id                    Int      @id @default(autoincrement())
  numero                String   @unique
  devisId               Int      @unique
  clientId              Int
  montantHT             Float
  tauxTVA               Float
  montantTTC            Float
  statut                String   @default("emise") // emise, envoyee, payee, annulee
  dateEmission          DateTime
  dateEcheance          DateTime
  datePaiement          DateTime?
  modePaiement          String?
  referenceTransaction  String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  devis   Devis?
  client  Client          @relation(fields: [clientId], references: [id])
  lignes  FactureLigne[]

  @@map("factures")
}

model FactureLigne {
  id            Int    @id @default(autoincrement())
  factureId     Int
  designation   String
  quantite      Float
  prixUnitaire  Float
  montantHT     Float
  ordre         Int

  // Relations
  facture Facture @relation(fields: [factureId], references: [id], onDelete: Cascade)

  @@map("facture_lignes")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  message   String
  data      String?
  readAt    DateTime?
  createdAt DateTime @default(now())

  // Relations
  user Utilisateur @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model NotificationPreferences {
  id                    Int     @id @default(autoincrement())
  userId                Int     @unique
  checkUnusualActivity  Boolean @default(true)
  checkNewSignIn        Boolean @default(true)
  notifyLatestNews      Boolean @default(true)
  notifyFeatureUpdate   Boolean @default(true)
  notifyAccountTips     Boolean @default(false)

  // Relations
  user Utilisateur @relation(fields: [userId], references: [id])

  @@map("notification_preferences")
}

model Report {
  id         Int      @id @default(autoincrement())
  reportType String
  userId     Int
  createdAt  DateTime @default(now())

  // Relations
  user Utilisateur @relation(fields: [userId], references: [id])

  @@map("reports")
}

model AuditLogs {
  id         Int      @id @default(autoincrement())
  userId     Int?
  username   String?
  actionType String
  entityType String
  entityId   Int?
  details    String?
  ipAddress  String?
  timestamp  DateTime @default(now())

  // Relations
  user Utilisateur? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}